<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:util="http://www.springframework.org/schema/util"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc
                                 http://www.springframework.org/schema/mvc/spring-mvc.xsd
                                 http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/context
                                 http://www.springframework.org/schema/context/spring-context.xsd
                                 http://www.springframework.org/schema/util
                                 https://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <!-- 스캔한 패키지 내부 클래스 중 Controller annotation 을 갖는 클래스들을 Controller 로 로딩하도록 한다. -->
    <annotation-driven/>


    <!-- 스캔한 bean 들이 모여있는 패키지를 지정. -->
    <!-- 예제 폴더를 바꿔야 할 때 기존 폴더를 반드시 주석처리할 것 -->
<!--    <context:component-scan base-package="controller.Setting"/>-->
<!--    <context:component-scan base-package="controller.RequestScopeBeanXml"/>-->
<!--    <context:component-scan base-package="controller.ApplicationScopeXml"/>-->
<!--    <context:component-scan base-package="controller.InterceptorXml"/>-->
    <context:component-scan base-package="controller.MyBatisXml"/>

<!-- Component 방식의 Bean 주입을 위해 패키지를 하나 더 지정한다. -->
<!--    <context:component-scan base-package="controller.RequestScopeBeanXml.beans"/>-->
<!--    <context:component-scan base-package="controller.SessionScopeBeanXml.beans"/>-->
<!--    <context:component-scan base-package="controller.ApplicationScopeXml.beans"/>-->



    <!-- Controller 의 메서드에서 반환하는 문자열 앞/뒤에 붙힐 경로정보를 세팅한다.
         이 작업으로 인해 모든 경로를 입력하는 불편함이 사라진다.-->
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/"/>
        <beans:property name="suffix" value=".jsp"/>
    </beans:bean>

    <!-- 정적파일(이미지, 동영상, js, css 등) 경로 설정. location 은 webapp 내부에 있는 resources 폴더를 지정한다. -->
    <resources mapping="/**" location="/resources/"/>



    <!-- MessageSource 등록. -->
    <beans:bean
            class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
            id="messageSource">

<!--    한 개 등록  :  <beans:property name="basename" value="/WEB-INF/properties/msgprop1"/>-->

        <!--  등록할 properties 가 2개 이상  -->
        <beans:property name="basenames">
            <beans:list>
                <beans:value>/WEB-INF/properties/msgprop1</beans:value>
                <beans:value>/WEB-INF/properties/msgprop2</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>



<!-- MessageSource 를 사용하기 위한 Accessor 등록. -->
    <beans:bean
            id="messageSourceAccessor"
            class="org.springframework.context.support.MessageSourceAccessor">
        <beans:constructor-arg ref="messageSource"/>
    </beans:bean>



<!-- Interceptor 들을 bean 으로 등록. -->
    <beans:bean class="interceptor.TestInterceptor1" id="inter1"/>
    <beans:bean class="interceptor.TestInterceptor5" id="inter5"/>
    <beans:bean class="interceptor.TestInterceptor6" id="inter6"/>

<!-- path 에는 반드시 /주소 형태로 입력할 것. 안적으면 인식을 못한다. -->
    <interceptors>
        <interceptor>
            <mapping path="/t1"/>
            <beans:ref bean="inter1"/>
        </interceptor>
        <interceptor>
            <mapping path="/t2"/>
            <!-- 이하 interceptor 는 이 관심사 에만 반응한다 -->
            <beans:bean class="interceptor.TestInterceptor2"/>
        </interceptor>
        <interceptor>
            <mapping path="/t2"/>
            <beans:ref bean="inter1"/>
        </interceptor>
        <interceptor>
            <mapping path="/**"/>
            <exclude-mapping path="/"/>
            <beans:ref bean="inter6"/>
        </interceptor>
    </interceptors>

<!--  .properties 파일을 사용하기 위한 Bean 등록.  -->

<!-- 기존 방식인 PropertyPlaceholderConfigurer 를 이용하는 방법. -->
<!-- PropertyPlaceholderConfigurer 는 지원종료(deprecate) 되어 상위버전에서는 사용할 수 없다. -->

<!--    <beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <beans:property name="location">-->
<!--            <beans:value>/WEB-INF/properties/database.properties</beans:value>-->
<!--        </beans:property>-->
<!--    </beans:bean>-->


<!-- Spring 2.5 이후부터 사용 가능한 방식. -->
    <context:property-placeholder location="/WEB-INF/properties/database.properties"/>


<!-- DB 접속을 위한 정보를 입력. -->
    <beans:bean class="org.apache.commons.dbcp2.BasicDataSource" id="basicDataSource">
        <beans:property name="driverClassName" value="${db.drv}"/>
        <beans:property name="url" value="${db.url}"/>
        <beans:property name="username" value="${db.usr}"/>
        <beans:property name="password" value="${db.pwd}"/>
    </beans:bean>


<!-- DB 접속정보와 mapper 파일 관리를 위한 Bean 등록. -->
    <beans:bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSession">
        <beans:property name="dataSource" ref="basicDataSource"/>
        <beans:property name="mapperLocations" value="WEB-INF/mapper/*.xml"/>
    </beans:bean>


<!-- query 문 전달을 위한 Bean 등록. -->
    <beans:bean class="org.mybatis.spring.SqlSessionTemplate" id="sessionTemplate">
        <beans:constructor-arg index="0" ref="sqlSession"/>
    </beans:bean>


</beans:beans>